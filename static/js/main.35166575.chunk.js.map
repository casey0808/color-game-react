{"version":3,"sources":["RandomColor.js","Header.js","Square.js","App.js","serviceWorker.js","index.js"],"names":["randomColor","Math","floor","random","Header","rgb","style","backgroundColor","color","fontSize","letterSpacing","textTransform","Square","useState","mode","setMode","replay","setReplay","colors","num","arr","i","push","generateRandomColors","pickedColor","length","pickColor","handleClick","e","clickedColor","currentTarget","document","querySelector","textContent","querySelectorAll","forEach","item","changeMode","m","picked","className","id","onClick","map","value","key","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAAA,SAASA,IAIL,MAAO,OAHCC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAGrB,KAFZF,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAEV,KADvBF,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GACC,I,MCU/BC,MAXf,WACI,IAAIC,EAAML,IACV,OACI,yBAAKM,MAAO,CAACC,gBAAiB,YAAaC,MAAO,QAASC,SAAU,OAAQC,cAAe,SAAUC,cAAe,cACjH,yCACA,4BAAKN,GACL,sCC0DGO,MA9Df,WAAkB,IAAD,EACWC,mBAAS,QADpB,mBACNC,EADM,KACAC,EADA,OAEeF,oBAAS,GAFxB,mBAENG,EAFM,KAEEC,EAFF,KAKTC,EFHR,SAA8BC,GAE1B,IADA,IAAIC,EAAM,GACFC,EAAI,EAAGA,EAAIF,EAAKE,IACpBD,EAAIE,KAAKtB,KAEb,OAAOoB,EEFMG,CADc,SAATT,EAAkB,EAAI,GAQlCU,EALN,WACI,IAAIrB,EAASF,KAAKC,MAAMD,KAAKE,SAAWe,EAAOO,QAC/C,OAAOP,EAAOf,GAGEuB,GAEpB,SAASC,EAAYC,GACjB,IAUkBpB,EAVdqB,EAAeD,EAAEE,cAAcxB,MAAMC,gBACtCiB,IAAgBK,GACfE,SAASC,cAAc,YAAYC,YAAc,WAQnCzB,EAPDgB,EAQjBO,SAASG,iBAAiB,WAAWC,SAAQ,SAAAC,GAAI,OAAIA,EAAK9B,MAAMC,gBAAkBC,KAP9EuB,SAASC,cAAc,UAAUC,YAAc,UAE/CL,EAAEE,cAAcxB,MAAMC,gBAAkB,QAehD,SAAS8B,EAAWC,GAChBvB,EAAQuB,GACRP,SAASC,cAAc,YAAYC,YAAc,GACjDF,SAASC,cAAc,UAAUC,YAAc,aAGnD,OACI,oCACA,kBAAC,EAAD,CAAQM,OAAQf,IAChB,yBAAKgB,UAAU,OACX,4BAAQC,GAAG,QAAQC,QAAS,kBAfhCzB,GAAWD,GACXe,SAASC,cAAc,YAAYC,YAAc,QACjDF,SAASC,cAAc,UAAUC,YAAc,gBAa3C,cACA,0BAAMQ,GAAG,YACT,6BACI,4BAAQC,QAAS,SAACJ,GAAD,OAAOD,EAAW,SAASG,UAAS,UAAc,SAAT1B,EAAkB,WAAY,KAAxF,QACA,4BAAQ4B,QAAS,SAACJ,GAAD,OAAOD,EAAW,SAASG,UAAS,UAAc,SAAT1B,EAAkB,WAAY,KAAxF,UAGR,yBAAK2B,GAAG,aACHvB,EAAOyB,KAAI,SAACnC,EAAOa,GAChB,OAAO,yBAAKmB,UAAU,SAASlC,MAAO,CAACC,gBAAgB,GAAD,OAAKC,IAAUoC,MAAOpC,EAAOkC,QAASf,EAAakB,IAAKxB,UC9C/GyB,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCGcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.35166575.chunk.js","sourcesContent":["function randomColor(){\r\n    var r = Math.floor(Math.random() * 256 + 1);\r\n    var g = Math.floor(Math.random() * 256 + 1);\r\n    var b = Math.floor(Math.random() * 256 + 1);\r\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\"\r\n}\r\n\r\nfunction generateRandomColors(num) {\r\n    let arr = [];\r\n    for(let i = 0; i < num; i++ ){\r\n        arr.push(randomColor())\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport {randomColor, generateRandomColors};","import React from 'react';\r\nimport { randomColor } from './RandomColor';\r\n\r\nfunction Header(){\r\n    let rgb = randomColor();\r\n    return (\r\n        <div style={{backgroundColor: 'steelblue', color: 'white', fontSize: '18px', letterSpacing: '0.5rem', textTransform: 'uppercase'}}>\r\n            <h1>THE GREAT</h1>\r\n            <h1>{rgb}</h1>\r\n            <h1>GAME</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport { generateRandomColors } from './RandomColor';\r\nimport './styles/Square.css';\r\nimport Header from './Header';\r\n\r\nfunction Square(){\r\n    const [mode, setMode] = useState('HARD');\r\n    const [replay, setReplay] = useState(false);\r\n\r\n    let numSquares = (mode === 'HARD' ? 6 : 3);\r\n    let colors = generateRandomColors(numSquares);\r\n\r\n    function pickColor(){\r\n        let random = Math.floor(Math.random() * colors.length);\r\n        return colors[random];\r\n    }\r\n\r\n    const pickedColor = pickColor();\r\n\r\n    function handleClick(e){\r\n        let clickedColor = e.currentTarget.style.backgroundColor;\r\n        if(pickedColor === clickedColor){\r\n            document.querySelector('#message').textContent = 'CORRECT!'\r\n            changeColors(pickedColor);\r\n            document.querySelector('#reset').textContent = 'REPLAY';\r\n        } else {\r\n            e.currentTarget.style.backgroundColor = 'black';\r\n        }\r\n    }\r\n\r\n    function changeColors(color) {\r\n        document.querySelectorAll('.square').forEach(item => item.style.backgroundColor = color);\r\n        // console.log(color);\r\n    }\r\n    \r\n    function reset(){\r\n        setReplay(!replay);\r\n        document.querySelector('#message').textContent = '';\r\n        document.querySelector('#reset').textContent = 'NEW COLORS';\r\n    }\r\n\r\n    function changeMode(m){\r\n        setMode(m);\r\n        document.querySelector('#message').textContent = '';\r\n        document.querySelector('#reset').textContent = 'NEW COLORS';\r\n    }\r\n    \r\n    return(\r\n        <>\r\n        <Header picked={pickedColor} />\r\n        <div className='nav'>\r\n            <button id=\"reset\" onClick={() => reset()}>NEW COLORS</button>\r\n            <span id=\"message\"></span>\r\n            <div>\r\n                <button onClick={(m) => changeMode('EASY')} className={`${mode === 'EASY' ? 'selected': ''}`}>EASY</button>\r\n                <button onClick={(m) => changeMode('HARD')} className={`${mode === 'HARD' ? 'selected': ''}`}>HARD</button>\r\n            </div>\r\n        </div>\r\n        <div id=\"container\">\r\n            {colors.map((color, i) => {\r\n                return <div className=\"square\" style={{backgroundColor: `${color}`}} value={color} onClick={handleClick} key={i}></div>\r\n            })}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Square;","import React from 'react';\nimport './App.css';\n// import Header from './Header';\n\nimport Square from './Square';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Square />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}